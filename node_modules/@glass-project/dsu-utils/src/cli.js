
const defaultOptions = {
    "action": "",
}

const ACTIONS = {
    "BACKUP": "backup",
    "CLEAN": "clean",
    "MKDEVENV": "mkdevenv",
    "WORKSPACE" : "workspace"
}

const argParser = function (defaultOptions, args){
    let config = {};

    const action = args.shift();

    const regex = /^--\w+=.*$/gm;

    if(action){
        if(action.match(regex)){
            let splits = action.split("=");
            config[splits[0].replace("--", "")] = splits[1];
        } else {
            config["action"] = action.replace("--", "");
        }
    }

    const arg = args.shift();
    if(arg){
        if(arg.match(regex)){
            let splits = arg.split("=");
            config[splits[0].replace("--", "")] = splits[1];
        } else {
            config["arg"] = arg.replace("--", "");
        }
    }

    let returnConfig = Object.assign({}, defaultOptions, config);

    return returnConfig;
}

const config = argParser(defaultOptions, process.argv.slice(2));

switch(config.action){
    case ACTIONS.BACKUP:
        const {backup} = require("./seedsBackupTool");
        backup(config.arg);
        break;
    case ACTIONS.CLEAN:
        const {clean} = require("./clean");
        clean(config.arg);
        break;
    case ACTIONS.MKDEVENV:
        const { makeDevEnv } = require("./mkDevEnv");
        makeDevEnv(config.arg);
        break;
    case ACTIONS.WORKSPACE:
        const {emulateWorkspace} = require('./emulateWorkspace');
        emulateWorkspace(config.arg);
        break;
    default:
        console.log("No Valid Action Provided");
}

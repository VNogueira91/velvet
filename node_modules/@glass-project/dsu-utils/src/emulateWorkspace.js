/**
 * Handles creating a OpenDSU ApiHub based workspace onto any repository.
 *
 * Provides the tools to customize said workspace to enable built-in
 * integration testing, compatible with any CI
 *
 * @namespace dsu-utils.emulation
 * @memberOf dsu-utils
 */

const path = require("path");

/**
 * allowed cli arguments
 *
 * @const WORKSPACE_ACTIONS
 *
 * @category Constants
 */
const WORKSPACE_ACTIONS = {
    /**
     * emulates an OpenDSU Workspace
     */
    SETUP: "setup",
    /**
     * reverts the process
     *
     * Not implemented
     */
    TEARDOWN: "teardown"
}

/**
 * Required dependencies
 *
 * @const DEPENDENCIES
 *
 * @category Constants
 */
const DEPENDENCIES = {
    "octopus": "git+https://github.com/PrivateSky/octopus.git"
}

/**
 * required npm scripts (these match with octopus-freeze.json)
 *
 * @const SCRIPTS
 *
 * @category Constants
 */
const SCRIPTS = {
    "postinstall": "node ./node_modules/octopus/scripts/setEnv --file=../../../env.json \"npm run do-install\"",
    "do-install": "node ./node_modules/octopus/scripts/ensureFreezeState.js && node ./node_modules/octopus/scripts/run",
    "build-all": "node ./node_modules/octopus/scripts/setEnv --file=../../../env.json \"node ./node_modules/octopus/scripts/run build\" && npm run backup-tool",
    "backup-tool": "node ./node_modules/@glass-project/dsu-utils/src/cli.js backup",
    "server": "node ./node_modules/octopus/scripts/setEnv --file=../../../env.json \"cd privatesky && npm run start\"",
    "install-privatesky": "node ./node_modules/octopus/scripts/setEnv --file=../../../env.json \"node ./node_modules/octopus/scripts/run privatesky-dependencies\"",
    "build-privatesky": "node ./node_modules/octopus/scripts/setEnv --file=../../../env.json \"node ./node_modules/octopus/scripts/run privatesky-build\""
}

/**
 * Required paths
 *
 * @const PATHS
 *
 * @category Constants
 */
const PATHS = {
    TESTS: "./tests/integration",
    API_HUB: "./apihub-root",
    EXTERNAL_VOLUME: "./apihub-root/external-volume",
    CONFIG: "./apihub-root/external-volume/config",
    DOMAINS: "./apihub-root/external-volume/config/domains"
}

/**
 * simplest possible version of octopus-freeze.json
 *
 * @const DefaultOctopus
 *
 * @category Constants
 */
const DefaultOctopus = {
    "workDir": path.resolve(process.cwd()),
    "privatesky-dependencies": [
        {
            "name": "privatesky",
            "src": "http://github.com/privatesky/psk-release.git",
            "actions": [
                {
                    "type": "smartClone",
                    "target": ".",
                    "collectLog": false,
                    "commit": "6f5ad4c50f6eea9589a5eaeaf056767c4a43d2b8"
                },
                {
                    "type": "execute",
                    "cmd": "cd privatesky && npm install"
                }
            ]
        },
        {
            "name": "build privatesky",
            "actions": [
                {
                    "type": "execute",
                    "cmd": "cd privatesky && npm run build"
                }
            ]
        }
    ],
    "privatesky-build": [

    ],
    "dependencies": [
        {
            "name": "privatesky",
            "src": ".",
            "actions": [
                {
                    "type": "execute",
                    "cmd": "npm run install-privatesky"
                }
            ]
        }
    ],
    "build": [
        {
            "name": "build-privatesky",
            "src": ".",
            "actions": [
                {
                    "type": "execute",
                    "cmd": "npm run build-privatesky"
                }
            ]
        }
    ]
}

/**
 * simplest possible BDNS
 *
 * @const DefaultBDNS
 *
 * @category Constants
 */
const DefaultBDNS = {
    "default": {
        "replicas": [],
        "brickStorages": [
            "$ORIGIN"
        ],
        "anchoringServices": [
            "$ORIGIN"
        ]
    },
    "vault": {
        "replicas": [],
        "brickStorages": [
            "$ORIGIN"
        ],
        "anchoringServices": [
            "$ORIGIN"
        ]
    }
}

/**
 * Local Domain config
 *
 * @const DefaultDomainConfig
 *
 * @category Constants
 */
const DefaultDomainConfig = {
    "anchoring": {
        "type": "FS",
        "option": {
            "enableBricksLedger": false
        },
        "commands": {
            "addAnchor": "anchor"
        }
    }
}

/**
 * Simplest possible ApiHub config
 *
 * @const DefaultApiHubConfig
 *
 * @category Constants
 */
const DefaultApiHubConfig = {
    "storage": "./apihub-root", //"../apihub-root",
    "port": 8080,
    "preventRateLimit": true,
    "activeComponents": [
        "virtualMQ",
        "messaging",
        "notifications",
        "filesManager",
        "bdns",
        "bricksLedger",
        "bricksFabric",
        "bricking",
        "anchoring",
        "dsu-wizard",
        "staticServer"
    ],
    "componentsConfig": {
        "bricking": {},
        "anchoring": {}
    },
    "enableRequestLogger": true,
    "enableJWTAuthorisation": false,
    "enableLocalhostAuthorization": false,
    "skipJWTAuthorisation": [
        "/directory-summary",
        "/resources",
        "/bdns",
        "/anchor/default",
        "/anchor/vault",
        "/bricking",
        "/bricksFabric",
        "/bricksledger",
        "/create-channel",
        "/forward-zeromq",
        "/send-message",
        "/receive-message",
        "/files",
        "/notifications",
        "/mq"
    ]
}

/**
 * standard enf.json content
 *
 * @const DefaultEnv
 *
 * @category Constants
 */
const DefaultEnv = {
    "PSK_TMP_WORKING_DIR": "tmp",
    "PSK_CONFIG_LOCATION": "../apihub-root/external-volume/config",
    "DEV": false
}

/**
 * Files that overriding is supported
 *
 * @const FILES
 *
 * @category Constants
 */
const FILES = {
    "testAssets/beforeTest.js": {
        path: "./beforeTest.js",
        standard: ""
    },
    "testAssets/octopus-freeze.json": {
        path: "./octopus-freeze.json",
        standard: DefaultOctopus
    },
    "testAssets/bdns.hosts": {
        path: path.join(path.resolve(PATHS.CONFIG), "bdns.hosts"),
        standard: DefaultBDNS
    },
    "testAssets/env.json": {
        path: "./env.json",
        standard: DefaultEnv
    },
    "testAssets/apihub.json": {
        path: path.join(PATHS.CONFIG, "apihub.json"),
        standard: DefaultApiHubConfig
    }
}

/**
 * Reverts the repository back to its original values
 *
 * ***NOT IMPLEMENTED***
 *
 * @function teardown
 *
 * @memberOf dsu-utils.emulation
 */
function teardown(){
    throw new Error("Not Implemented yet");
}

/**
 * Runs a shell command in a separate process and waits for its completion
 *
 * @param {string} command
 * @param {any[]} args las arg must be the callback
 *
 * @function runCommand
 *
 * @memberOf dsu-utils.emulation
 */
function runCommand(command, ...args){
    const { spawn } = require("child_process");
    const callback = args.pop()

    const spawned = spawn(command, args);

    const log = {
        data: [],
        error: []
    }

    function errorCallback(err, log, callback){
        const error = new Error(`ERROR in child Process: ${err.message || err}\n
                                 -- log: \n${log.data.join("\n")}\n
                                 -- error: \n${log.error.join("\n")}`);
        callback(error)
    }

    spawned.stdout.on("data", data => {
        console.log(data.toString());
        log.data.push(data.toString());
    });

    spawned.stderr.on("data", data => {
        console.log(data.toString());
        log.error.push(data.toString());
    });

    spawned.on('error', (error) => {
        console.log(`error: ${error.message}`);
        errorCallback(error, log, callback);
    });

    spawned.on("close", code => {
        console.log(`child process exited with code ${code}`);
        return code === 0 ? callback(undefined, log) : errorCallback(new Error("exist code " + code), log, callback);
    });
}

/**
 * Sets up ae OpenDSU APIHUB Workspace in the current path
 *
 * @param {Function} callback
 *
 * @function setup
 *
 * @memberOf dsu-utils.emulation
 */
function setup(callback){
    console.log("WARNING: THIS SCRIPT IS ONLY MEANT TO BE EXECUTED IN CI TO PERFORM INTEGRATION TESTING")
    console.log("WARNING: THIS SCRIPT CHANGES IMPORTANTE CONFIGURATION FILES. NEVER COMMIT AFTER RUNNING THIS SCRIPT!")

    const fs = require('fs');

    const currentPath = process.cwd();

    function updatePackage(callback){
        function getPackage(){
            try{
                let pkg = fs.readFileSync(path.join(currentPath, "package.json"));
                if (!pkg)
                    return callback(new Error("Package json not found at " + path.join(process.cwd(), "package.json")));
                pkg = JSON.parse(pkg);
                return pkg;
            } catch(e) {
                return callback(new Error("Package json not found at " + path.join(process.cwd(), "package.json") + " " + e.message));
            }
        }

        function overridePackage(data, callback){
            try{
                fs.writeFileSync(path.join(currentPath, "package.json"), data);
                console.log("Package.json overriden")
            } catch(e) {
                return callback(new Error("Could not write at " + path.join(process.cwd(), "package.json") + " " + e.message));
            }
            callback()
        }

        const pkg = getPackage();

        Object.entries(DEPENDENCIES).forEach(([k, v]) => {
            pkg.devDependencies = pkg.devDependencies || {};
            if (!(k in pkg.devDependencies)){
                pkg.devDependencies[k] = v;
                console.log(`dependency on ${k}: ${v} added`)
            }
        });

        Object.entries(SCRIPTS).forEach(([k, v]) => {
            pkg.scripts = pkg.scripts || {};
            if (!(k in pkg.scripts)){
                pkg.scripts[k] = v;
                console.log(`script ${k}: ${v} added`)
            }
        });

        overridePackage(JSON.stringify(pkg, undefined, 2), (err) => {
            if (err)
                return callback(err);
            callback(undefined, pkg)
        })
    }

    function createApiHub(callback){
        console.log("Creating API HUB Paths")

        try {
            fs.mkdirSync(path.resolve(PATHS.DOMAINS), {recursive: true});
        } catch(e) {
            return callback(e);
        }

        function setUpFiles(){
            let bdns;
            let beforeScript;

            const fileSetup = Object.entries(FILES).every(([k, v]) => {
                let overrideExists = true;
                try {
                    fs.statSync(path.join(PATHS.TESTS, k));
                } catch (e) {
                    overrideExists = false;
                }

                try{
                    const dataToWrite = overrideExists ? fs.readFileSync(path.join(PATHS.TESTS, k)) : (v.standard ? JSON.stringify(v.standard, undefined, 2) : undefined);
                    if (dataToWrite){
                        fs.writeFileSync(v.path, dataToWrite);
                        console.log("File overriden at " + v.path)
                        if (k.indexOf("bdns.hosts") !== -1)
                            bdns = JSON.parse(dataToWrite);
                        if (k.indexOf("beforeTest.js") !== -1)
                            beforeScript = v.path;
                    }
                    return true;
                } catch (e){
                    console.log(e)
                    return false
                }
            });

            const domains = Object.keys(bdns).every(k => {
                try {
                    fs.statSync(path.join(PATHS.DOMAINS, k))
                    return true;
                } catch (e) {
                    try {
                        fs.writeFileSync(path.join(PATHS.DOMAINS, k), JSON.stringify(DefaultDomainConfig, undefined, 2));
                        console.log("File overriden at " + path.join(PATHS.DOMAINS, k))
                        return true;
                    } catch (e) {
                        console.log(e)
                        return false;
                    }
                }
            });

            if (!fileSetup || !domains)
                return callback(new Error("not all files where overriden"));
            callback(undefined, beforeScript);
        }

        setUpFiles();
    }


    function boot(beforeScript, callback){
        runCommand("npm", "install", (err, log) => {
            if (err)
                return callback(err);
            runCommand("npm", "run", "server", (err, log) => {
                if (err)
                    return callback(err);
                console.log("Server Closed: ")
            });
            setTimeout(() => {
                runCommand("npm", "run", "build-all", (err, log) => {
                    if (err)
                        return callback(err);

                    if (beforeScript)
                        require(path.join(process.cwd(), beforeScript));

                    runCommand("npm", "run", "test:all", (err, log) => {
                        if (err)
                            return callback(err);
                        callback(undefined, log);
                    })
                })
            }, 5000)
        })
    }

    updatePackage((err) => {
        if (err)
            return callback(err);
        createApiHub((err, beforeScript) => {
            if (err)
                return callback(err);
            boot(beforeScript, callback)
        });
    });

}

/**
 * Calls {@link setup} or {@link teardown} according to the received action
 *
 * @param {string} action one of {@link WORKSPACE_ACTIONS}
 *
 * @function emulateWorkspace
 *
 * @memberOf dsu-utils.emulation
 */
function emulateWorkspace(action){

    const callback = (e) => {
        if (e){
            console.log(e)
            process.exit(1)
        }
        process.exit(0)
    }

    switch (action){
        case WORKSPACE_ACTIONS.SETUP:
            return setup(callback);
        case WORKSPACE_ACTIONS.TEARDOWN:
            return teardown();
        default:
            throw new Error("Invalid Action");
    }
}

module.exports = {
    emulateWorkspace,
    teardown,
    runCommand,
    DefaultBDNS,
    DefaultEnv,
    DefaultOctopus,
    DefaultApiHubConfig,
    DefaultDomainConfig,
    WORKSPACE_ACTIONS,
    DEPENDENCIES,
    SCRIPTS,
    PATHS,
    FILES
}